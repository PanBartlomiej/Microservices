{
	"info": {
		"_postman_id": "f9292fba-aed7-4eba-81a3-b87b8b5b8d6e",
		"name": "Ewidencja urządzeń sieciowych",
		"description": "API collection for managing various devices including Access Point, Computer, Switch, Port, Router, and Server.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34474832"
	},
	"item": [
		{
			"name": "Aautentication",
			"item": [
				{
					"name": "openid-configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.issuer).to.exist;",
									"    pm.expect(responseData.authorization_endpoint).to.exist;",
									"    pm.expect(responseData.token_endpoint).to.exist;",
									"    pm.expect(responseData.introspection_endpoint).to.exist;",
									"    pm.expect(responseData.userinfo_endpoint).to.exist;",
									"    pm.expect(responseData.end_session_endpoint).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Grant types supported array is present and contains expected elements\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.have.property('grant_types_supported').that.is.an('array').and.that.is.not.empty;",
									"    responseData.grant_types_supported.forEach(function(grantType) {",
									"        pm.expect(grantType).to.be.a('string');",
									"        // Add additional checks for expected elements if needed",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Revocation endpoint is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.revocation_endpoint).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Scopes_supported is an array and not empty\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.scopes_supported).to.be.an('array');",
									"    pm.expect(responseData.scopes_supported).to.have.lengthOf.at.least(1, \"Array should not be empty\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{server}}/realms/{{realm}}/.well-known/openid-configuration",
							"host": [
								"{{server}}"
							],
							"path": [
								"realms",
								"{{realm}}",
								".well-known",
								"openid-configuration"
							]
						}
					},
					"response": []
				},
				{
					"name": "authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"refresh_token\", jsonData.refresh_token);\r",
									"postman.setEnvironmentVariable(\"access_token\", jsonData.access_token);",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Access token is not empty\", function () {",
									"  const responseData = pm.response.json();",
									"  pm.expect(responseData.access_token).to.exist.and.to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Token type is valid\", function () {",
									"  const responseData = pm.response.json();",
									"  pm.expect(responseData).to.have.property('token_type').that.is.a('string').and.not.empty;",
									"});",
									"",
									"",
									"pm.test(\"Expires in is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.expires_in).to.be.a('number');",
									"    pm.expect(responseData.expires_in).to.be.at.least(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{client_id}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{server}}/realms/{{realm}}/protocol/openid-connect/token",
							"host": [
								"{{server}}"
							],
							"path": [
								"realms",
								"{{realm}}",
								"protocol",
								"openid-connect",
								"token"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "AccessPoint Service",
			"item": [
				{
					"name": "Add New AccessPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains success message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.responseText).to.eql(\"Product added\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"id\": \"1\", \"netID\": \"AccessPoint123\", \"ports\": [] }"
						},
						"url": {
							"raw": "http://localhost:8090/api/accesspoint/add",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"accesspoint",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get AccessPoint By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains ID\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "http://localhost:8090/api/accesspoint/GetOne/{{Id}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"accesspoint",
								"GetOne",
								"{{Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All AccessPoints",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "http://localhost:8090/api/accesspoint/GetAll",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"accesspoint",
								"GetAll"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update AccessPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains success message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.responseText).to.eql(\"Product updated successfully\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"id\": \"1\", \"netID\": \"UpdatedAccessPoint123\", \"ports\": [] }"
						},
						"url": {
							"raw": "http://localhost:8090/api/accesspoint/{{productID}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"accesspoint",
								"{{productID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete AccessPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains success message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.responseText).to.eql(\"Product deleted successfully\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "http://localhost:8090/api/accesspoint/{{productID}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"accesspoint",
								"{{productID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Switch Service",
			"item": [
				{
					"name": "Add New Switch",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains success message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.responseText).to.eql(\"Product added\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"id\": \"1\", \"netID\": \"Switch123\", \"ports\": [] }"
						},
						"url": {
							"raw": "http://localhost:8090/api/switch/add",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"switch",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Switch By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains ID\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "http://localhost:8090/api/switch/GetOne/{{Id}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"switch",
								"GetOne",
								"{{Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Switches",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "http://localhost:8090/api/switch/GetAll",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"switch",
								"GetAll"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Switch",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains success message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.responseText).to.eql(\"Product updated successfully\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"id\": \"1\", \"netID\": \"UpdatedSwitch123\", \"ports\": [] }"
						},
						"url": {
							"raw": "http://localhost:8090/api/switch/{{productID}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"switch",
								"{{productID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Switch",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains success message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.responseText).to.eql(\"Product deleted successfully\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "http://localhost:8090/api/switch/{{productID}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"switch",
								"{{productID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Port Service",
			"item": [
				{
					"name": "Add New Port",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains success message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.responseText).to.eql(\"Port added\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"id\": \"{{portID}}\", \"medium\": \"optical_fiber\", \"transmissionSpeed\": 1000, \"ports\": [] }"
						},
						"url": {
							"raw": "http://localhost:8090/api/port/Add",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"port",
								"Add"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Port By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains ID\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "http://localhost:8090/api/port/GetOne/{{portID}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"port",
								"GetOne",
								"{{portID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Ports",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "http://localhost:8090/api/port/GetAll",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"port",
								"GetAll"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Port",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains success message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.responseText).to.eql(\"Port removed\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "http://localhost:8090/api/port/{{portID}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"port",
								"{{portID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Router Service",
			"item": [
				{
					"name": "Add New Router",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains success message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.responseText).to.eql(\"Product added\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"id\": \"1\", \"netID\": \"Router123\", \"ports\": [] }"
						},
						"url": {
							"raw": "http://localhost:8090/api/router/add",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"router",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Router By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains ID\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "http://localhost:8090/api/router/GetOne/{{Id}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"router",
								"GetOne",
								"{{Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Routers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "http://localhost:8090/api/router/GetAll",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"router",
								"GetAll"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Router",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains success message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.responseText).to.eql(\"Product updated successfully\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"id\": \"1\", \"netID\": \"UpdatedRouter123\", \"ports\": [] }"
						},
						"url": {
							"raw": "http://localhost:8090/api/router/{{productID}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"router",
								"{{productID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Router",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains success message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.responseText).to.eql(\"Product deleted successfully\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "http://localhost:8090/api/router/{{productID}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"router",
								"{{productID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Computer Service",
			"item": [
				{
					"name": "Add New computer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains success message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.responseText).to.eql(\"Product added\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"id\": \"1\", \"netID\": \"computer123\", \"ports\": [] }"
						},
						"url": {
							"raw": "http://localhost:8090/api/computer/add",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"computer",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Computer By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains ID\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "http://localhost:8090/api/computer/GetOne/{{Id}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"computer",
								"GetOne",
								"{{Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All computers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "http://localhost:8090/api/computer/GetAll",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"computer",
								"GetAll"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update computer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains success message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.responseText).to.eql(\"Product updated successfully\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"id\": \"1\", \"netID\": \"Updatedcomputer123\", \"ports\": [] }"
						},
						"url": {
							"raw": "http://localhost:8090/api/computer/{{productID}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"computer",
								"{{productID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete computer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains success message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.responseText).to.eql(\"Product deleted successfully\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "http://localhost:8090/api/computer/{{productID}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"computer",
								"{{productID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Server Service",
			"item": [
				{
					"name": "Add New Server",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains success message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.responseText).to.eql(\"Product added\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"id\": \"1\", \"netID\": \"Server123\", \"ports\": [] }"
						},
						"url": {
							"raw": "http://localhost:8090/api/server/add",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"server",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Server By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains ID\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "http://localhost:8090/api/server/GetOne/{{Id}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"server",
								"GetOne",
								"{{Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Servers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "http://localhost:8090/api/server/GetAll",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"server",
								"GetAll"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Server",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains success message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.responseText).to.eql(\"Product updated successfully\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"id\": \"1\", \"netID\": \"UpdatedServer123\", \"ports\": [] }"
						},
						"url": {
							"raw": "http://localhost:8090/api/server/{{productID}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"server",
								"{{productID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Server",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains success message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.responseText).to.eql(\"Product deleted successfully\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "http://localhost:8090/api/server/{{productID}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"server",
								"{{productID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "AllDevice Service",
			"item": [
				{
					"name": "Add New AccessPoint Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains success message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.responseText).to.eql(\"Product added\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"id\": \"1\", \"netID\": \"AccessPoint123\", \"ports\": [] }"
						},
						"url": {
							"raw": "http://localhost:8090/api/accesspoint/add",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"accesspoint",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Device By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "http://localhost:8090/api/all/GetOne/{{productID}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"all",
								"GetOne",
								"{{productID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Devices",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "http://localhost:8090/api/all/GetAll",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"all",
								"GetAll"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete AccessPoint Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains success message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.responseText).to.eql(\"Product deleted successfully\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "http://localhost:8090/api/accesspoint/{{productID}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"accesspoint",
								"{{productID}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}