version: '3.8'

services:
#TESTY
  newman:
    image: postman/newman:alpine
    volumes:
      - ./postman_collection:/etc/postman
    entrypoint: [ "newman", "run", "/etc/postman/Gateway.postman_collection.json", "--environment",
                  "/etc/postman/pracaMagisterska.postman_environment.json" ]
    depends_on:
      - gateway
    networks:
      - app-network
  #FRONTEND
  frontend:
    build:
      context: './frontend/'
      dockerfile: Dockerfile
    hostname: frontend
    networks:
      - app-network
    ports:
      - "80:80"
    depends_on:
      - gateway
  #BACKEND
  ewidencja:
    build:
      context: ./Ewidencja
      dockerfile: Dockerfile
    container_name: Ewidencja
    ports:
      - "8090:8090"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - DB_ewidencja_mongo
      - eureka
      - auth_keycloak
      - config-server
    networks:
      - app-network

  graf:
    build:
      context: ./Graf
      dockerfile: Dockerfile
    container_name: Graf
    ports:
      - "8089:8089"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - DB_ewidencja_grafowa_baza
      - eureka
      - auth_keycloak
      - config-server
    networks:
      - app-network

  monitoring:
    build:
      context: ./Monitoring
      dockerfile: Dockerfile
    container_name: Monitoring
    ports:
      - "8091:8091"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - DB_ewidencja_grafowa_baza # tu powinnna być baza influxDB
      - eureka
      - auth_keycloak
      - config-server
    networks:
      - app-network
    hostname: monitoring
  app-metrics:
    build:
      context: ./App-Metrics
      dockerfile: Dockerfile
    container_name: App-Metrics
    ports:
      - "9090:9090"
    depends_on:
      - eureka
      - config-server
    networks:
      - app-network
    hostname: app-metrics
  gateway:
    build:
      context: ./Gateway
      dockerfile: Dockerfile
    container_name: Gateway
    ports:
      - "8222:8222"
    depends_on:
      - eureka
      - auth_keycloak
      - config-server
      - monitoring
      - graf
      - ewidencja
    networks:
      - app-network
    hostname: gateway

  config-server:
    build:
      context: ./Config-server
      dockerfile: Dockerfile
    container_name: Config-server
    ports:
      - "8888:8888"
    networks:
      - app-network
    hostname: config-server

  eureka:
    build:
      context: ./Discovery
      dockerfile: Dockerfile
    container_name: eureka-discovery-service
    ports:
      - "8761:8761"
    depends_on:
      - config-server
    networks:
      - app-network
    hostname: eureka

  # Baza danych MongoDB
    # BAZA DANYCH EWIDENCJA - NEO4J
    # BAZA URZĄDZEŃ I PORTÓW
  DB_ewidencja_grafowa_baza:
    image: neo4j:latest
    volumes:
      - 'neo4j_data:/data'
    ports:
      - 7474:7474
      - 7687:7687
    restart: on-failure
    environment:
      NEO4J_AUTH: ${NEO4J_USER}/${NEO4J_PASSWORD}
    hostname: neo4j
    networks:
      - app-network
    command: neo4j
  auth_keycloak:
    image: quay.io/keycloak/keycloak:${KEYCLOAK_VERSION}
    environment:
      DB_VENDOR: postgres
      DB_ADDR: postgres
      DB_DATABASE: ${POSTGRES_DB}
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KC_HOSTNAME: keycloak
    ports:
      - '8080:8080'
    command: -v start-dev --import-realm
    depends_on:
      - DB_users_auth_postgres
    volumes:
      - keycloak_data:/opt/keycloak/data
      - ./keycloak_import:/opt/keycloak/data/import
    hostname: keycloak
    networks:
      - app-network

    # BAZA DANYCH SERWERA AUTORYZACYJNEGO - POSTGRES
  DB_users_auth_postgres:
    image: postgres:${POSTGRES_VERSION}
    hostname: postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    # BAZA DANCH DOKUMENTOWA EWIDENCJI - MONGO
  DB_ewidencja_mongo:
    hostname: mongo
    image: mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
    ports:
      - '27017:27017'
    volumes:
      - mongo_data:/data/db
    networks:
      - app-network
volumes:
  neo4j_data:
  postgres_data:
  mongo_data:
  keycloak_data:
networks:
  app-network:
    driver: bridge
